package com.fullstack.dochub.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.fullstack.dochub.entity.Admin;
import com.fullstack.dochub.entity.Appointments;
import com.fullstack.dochub.entity.Client;
import com.fullstack.dochub.entity.Doctor;
import com.fullstack.dochub.service.AdminService;
import com.fullstack.dochub.service.AppointmentsService;
import com.fullstack.dochub.service.ClientService;
import com.fullstack.dochub.service.DoctorService;

import jakarta.servlet.http.HttpSession;

@CrossOrigin
@RestController
@RequestMapping("/api")
public class Controller {
	@Autowired
	private AppointmentsService appointmentsService;

	@Autowired
	private ClientService clientService;

	@Autowired
	private DoctorService doctorService;

	@Autowired
	private AdminService adminService;

	// Client registration
	@PostMapping("/clientRegistration")
	public ResponseEntity<Client> clientRegistration(@RequestBody Client client, HttpSession session) {
		if (client.getEmail() == null || client.getEmail().isEmpty()) {
			return ResponseEntity.badRequest().body(null);
		}
		// Additional validation checks can be added here
		Client newClient = clientService.addNewClient(client);
		session.setAttribute("data", newClient);
		return ResponseEntity.status(HttpStatus.CREATED).body(newClient);
	}

	// Client login
	@PostMapping("/clientLogin")
	public ResponseEntity<Client> clientLogin(@RequestBody Client client) {
		if (client.getPassword() == null || client.getEmail() == null) {
			return ResponseEntity.badRequest().body(null);
		}
		Client loggedInClient = clientService.clientLogin(client.getEmail(), client.getPassword());
		if (loggedInClient == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		}
		return ResponseEntity.ok(loggedInClient);
	}

	// Doctor registration
	@PostMapping("/doctorRegistration")
	public ResponseEntity<Doctor> doctorRegistration(@RequestBody Doctor doctor, HttpSession session) {
		if (doctor.getEmail() == null || doctor.getEmail().isEmpty()) {
			return ResponseEntity.badRequest().body(null);
		}
		// Additional validation checks can be added here
		Doctor newDoctor = doctorService.addNewDoctor(doctor);
		session.setAttribute("data", newDoctor);
		return ResponseEntity.status(HttpStatus.CREATED).body(newDoctor);
	}

	// Doctor login
	@PostMapping("/doctorLogin")
	public ResponseEntity<Doctor> doctorLogin(@RequestBody Doctor doctor) {
		if (doctor.getPassword() == null || doctor.getEmail() == null) {
			return ResponseEntity.badRequest().body(null);
		}
		Doctor loggedInDoctor = doctorService.doctorLogin(doctor.getEmail(), doctor.getPassword());
		if (loggedInDoctor == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		}
		return ResponseEntity.ok(loggedInDoctor);
	}

	// Admin login
	@PostMapping("/adminLogin")
	public ResponseEntity<Admin> adminLogin(@RequestBody Admin admin) {
		if (admin.getPassword() == null || admin.getEmail() == null) {
			return ResponseEntity.badRequest().body(null);
		}
		Admin loggedInAdmin = adminService.adminLogin(admin.getEmail(), admin.getPassword());
		if (loggedInAdmin == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		}
		return ResponseEntity.ok(loggedInAdmin);
	}

	/**
	 * Endpoint to book a new appointment.
	 *
	 * @param clientEmail the email of the client
	 * @param doctorEmail the email of the doctor
	 * @param appointment the appointment details
	 * @return the booked appointment
	 */
	@PostMapping("/client/bookAppointments/{clientEmail}/{doctorEmail}")
	public ResponseEntity<Appointments> bookAppointment(@PathVariable String clientEmail,
			@PathVariable String doctorEmail, @RequestBody Appointments appointment) {
		try {
			Appointments bookedAppointment = appointmentsService.bookAppointment(clientEmail, doctorEmail, appointment);
			return ResponseEntity.status(HttpStatus.CREATED).body(bookedAppointment);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
		}
	}

	/**
	 * Retrieves the list of appointments for a given client.
	 *
	 * @param clientEmail the email of the client
	 * @return the list of appointments
	 */
	@GetMapping("/client/appointments/{clientEmail}")
	public ResponseEntity<List<Appointments>> getClientAppointments(@PathVariable String clientEmail) {
		try {
			List<Appointments> appointmentList = appointmentsService.getClientAppointments(clientEmail);
			return ResponseEntity.ok(appointmentList);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		}
	}

	/**
	 * Retrieves the list of appointments for a given doctor.
	 *
	 * @param doctorEmail the email of the doctor
	 * @return the list of appointments
	 */
	@GetMapping("/doctor/appointments/{doctorEmail}")
	public ResponseEntity<List<Appointments>> getDoctorAppointments(@PathVariable String doctorEmail) {
		try {
			List<Appointments> appointmentList = appointmentsService.getDoctorAppointments(doctorEmail);
			return ResponseEntity.ok(appointmentList);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
		}
	}

	/**
	 * Updates the status of an appointment.
	 *
	 * @param appointment the appointment with the updated status
	 * @return the updated appointment
	 */
	@PutMapping("/doctor/editAppointmentStatus")
	public ResponseEntity<Appointments> updateAppointmentStatus(@RequestBody Appointments appointment) {
		try {
			Appointments updatedAppointment = appointmentsService.updateAppointmentStatus(appointment);
			return ResponseEntity.ok(updatedAppointment);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
		}
	}

	// get all client in admin
	@GetMapping("/admin/getClient")
	public List<Client> getAllClient() {
		List<Client> clientlist = adminService.getAllClient();

		if (clientlist == null) {
			return null;
		}
		return clientlist;
	}

}
