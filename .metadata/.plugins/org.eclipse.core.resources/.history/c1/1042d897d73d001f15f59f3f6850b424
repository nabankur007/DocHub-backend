package com.fullstack.dochub.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.fullstack.dochub.Entity.Appointments;
import com.fullstack.dochub.Entity.Client;
import com.fullstack.dochub.Entity.Doctor;
import com.fullstack.dochub.repository.AppointmentsRepository;
import com.fullstack.dochub.repository.ClientRepository;
import com.fullstack.dochub.repository.DoctorRepository;

@Service
public class AppointmentsService {

	@Autowired
	private AppointmentsRepository appointmentsRepository;

	@Autowired
	private ClientRepository clientRepository;

	@Autowired
	private DoctorRepository doctorRepository;

	/**
	 * Books a new appointment.
	 * 
	 * @param clientEmail the email of the client
	 * @param doctorEmail the email of the doctor
	 * @param appointment the appointment details
	 * @return the booked appointment
	 */
	public Appointments bookAppointment(String clientEmail, String doctorEmail, Appointments appointment) {
		Client client = clientRepository.findById(clientEmail)
				.orElseThrow(() -> new IllegalArgumentException("Client not found"));
		Doctor doctor = doctorRepository.findById(doctorEmail)
				.orElseThrow(() -> new IllegalArgumentException("Doctor not found"));

		appointment.setClient(client);
		appointment.setDoctor(doctor);

		return appointmentsRepository.save(appointment);
	}

	/**
	 * Retrieves the list of appointments for a given client.
	 * 
	 * @param clientEmail the email of the client
	 * @return the list of appointments
	 */
	public List<Appointments> getClientAppointments(String clientEmail) {
		List<Appointments> appointmentList = appointmentsRepository.findByClientEmail(clientEmail);
		if (appointmentList == null || appointmentList.isEmpty()) {
			throw new IllegalArgumentException("No appointments found for the client");
		}
		return appointmentList;
	}

	/**
	 * Retrieves the list of appointments for a given doctor.
	 * 
	 * @param doctorEmail the email of the doctor
	 * @return the list of appointments
	 */
	public List<Appointments> getDoctorAppointments(String doctorEmail) {
		List<Appointments> appointmentList = appointmentsRepository.findByDoctorEmail(doctorEmail);
		if (appointmentList == null || appointmentList.isEmpty()) {
			throw new IllegalArgumentException("No appointments found for the doctor");
		}
		return appointmentList;
	}

	/**
	 * Updates the status of an appointment.
	 * 
	 * @param appointment the appointment with the updated status
	 * @return the updated appointment
	 */
	public Appointments updateAppointmentStatus(Appointments appointment) {
		if (appointment.getId() == -1) {
			throw new IllegalArgumentException("Appointment ID is required for updating status");
		}
		return appointmentsRepository.save(appointment);
	}
}
